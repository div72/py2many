name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    strategy:
      matrix:
        os:
          - ubuntu-18.04
          - macos-10.15
          - windows-2019
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - uses: julia-actions/setup-julia@v1
      - uses: fwilhe2/setup-kotlin@main
      - uses: jiro4989/setup-nim-action@v1
      - uses: actions/setup-go@v2
        # Needed as https://github.com/actions/setup-go/pull/89 is not merged
        with:
          go-version: '1.15'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install V
        shell: bash
        run: |
          git clone --single-branch https://github.com/vlang/v.git /tmp/v
          (cd /tmp/v && git checkout 02f0a3055515c8e13b5e016ef266b346b705e3d3)
          if [ "$RUNNER_OS" == "Windows" ]; then
            (cd /tmp/v && git clone https://github.com/vlang/vc.git)
            (cd /tmp/v/thirdparty && git clone --depth 1 --single-branch --branch thirdparty-windows-amd64 https://github.com/vlang/tccbin.git tcc)
            (cd /tmp/v/vc && git checkout 3a67714ab8134cbbf0276ce3418592dbe73c7a15)
            (cd /tmp/v && ./make.bat --local)
          else
            (cd /tmp/v && mkdir -p vc && curl -o vc/v.c https://raw.githubusercontent.com/vlang/vc/3a67714ab8134cbbf0276ce3418592dbe73c7a15/v.c)
            (cd /tmp/v && local=1 make -j4)
            (cd /usr/local/bin && sudo ln -s /tmp/v/v)
          fi

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2

      - name: Install go packages
        shell: bash
        run: |
          (go get github.com/hgfischer/go-iter \
           && go get github.com/google/go-cmp/cmp \
           && go get github.com/adsharma/py2many/pygo/runtime \
           && go get github.com/mgechev/revive \
          )

      - name: Install tox
        run: |
          pip3 --version
          pip3 install setuptools tox

      - name: Install Julia packages
        shell: bash
        run: |
          julia -e 'using Pkg; Pkg.add("JuliaFormatter")'
          julia -e 'using Pkg; Pkg.add("SuperEnum")'

      - name: Install dependencies for ${{ runner.os }}.
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install --yes astyle
              curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.41.0/ktlint
              chmod a+x ktlint
              sudo mv ktlint /usr/local/bin/
              (cd /usr/local/bin && sudo ln -s $(find ~/.julia -name format.jl))
              (cd /usr/local/bin && sudo ln -s $HOME/go/bin/golint)
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew tap holgerbrandl/tap https://github.com/holgerbrandl/homebrew-tap
              brew install clang-format kscript ktlint astyle
              (cd /usr/local/bin && ln -s $(find ~/.julia -name format.jl))
              (cd /usr/local/bin && ln -s $HOME/go/bin/golint)
          elif [ "$RUNNER_OS" == "Windows" ]; then
              choco install zip curl astyle llvm
          fi
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install kscript

      - name: Install dart dependencies
        shell: bash
        run: |
          dart --version
          # tests/build here must be the same as defined in test_cli
          (dart create --no-pub -t package-simple tests/build && cd tests/build \
           && dart pub add collection \
           && dart pub add sprintf \
           && dart pub add tuple \
           && sed -i.bak '/test:/d' pubspec.yaml \
           && flutter pub add vnum)

      - name: Install cargo-script
        run: cargo install cargo-script

      - name: Run tox
        shell: bash
        # sdkman init can be replaced with actions setup when the following is fixed
        # https://github.com/sdkman/sdkman-action/issues/8
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          LINT=1
          if [ "$RUNNER_OS" == "Windows" ]; then
            export PATH="$PATH:/C/Program Files/LLVM/bin:/tmp/v"
          fi
          tox

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install linters
        run: pip install black pyflakes cpplint

      - name: Remove tests/cases/*.py & tests/expected/*.py
        run: rm tests/cases/*.py tests/expected/*.py tests/dir_cases/test1-*-expected/*.py

      - name: Run black
        run: black --check */ *.py

      - name: Run pyflakes
        run: pyflakes */ *.py

      - name: Run cpplint
        run: cpplint --filter=-legal/copyright,-whitespace/semicolon tests/expected/*.cpp
